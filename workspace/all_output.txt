Explanation:

Unit testing is a level of software testing where individual units or components of a software are tested. The purpose is to validate that each unit of the software performs as designed.

Here is a very basic example of unit testing in the context of a "Hello World" program using the NUnit framework:

```csharp
using NUnit.Framework;
using System;
using System.IO;

[TestFixture]
public class HelloWorldTest
{
    private StringWriter consoleOutput;

    [SetUp]
    public void SetUp()
    {
        consoleOutput = new StringWriter();
        Console.SetOut(consoleOutput);
    }

    [Test]
    public void TestHelloWorldOutput()
    {
        Program.Main();
        Assert.AreEqual("Hello World!\r\n", consoleOutput.ToString());
    }
}
```

Explanation:
This unit test is using the NUnit testing framework. The `[Test]` attribute denotes that the method below it is a test method.

The `SetUp` method is run before every test. In this method, we're redirecting console output to a `StringWriter` so that we can compare the output with the expected result.

In the `TestHelloWorldOutput` test, we're testing that the output of the `Main` method (our "Hello World!" message) matches a specific string ("Hello World!\r\n").

Note: The `\r\n` is indicating a new line in the text. The `\r` means 'return' and `\n` means 'newline'. The combination of these two together (`\r\n`) is used to start new lines of text on Windows. On Unix and Macintosh machines, only the `\n` character is used.

This is a very basic test and real-world applications would involve more complex tests.